import numpy as np
import os
import skimage.io as io
import matplotlib.pyplot as plt
import scipy.ndimage as nd
import importlib

from segmentation.utils import data_utils, segmentation_utils
import xarray as xr
importlib.reload(data_utils)


# specify base directory for subsequent processing
base_dir = '/Users/noahgreenwald/Documents/Grad_School/Lab/Segmentation_Project/Contours/analyses'
base_dir = '/Users/noahgreenwald/Documents/MIBI_DATA/tyler/20191016_Cohort/watershed_network_output/'
base_dir = '/Users/noahgreenwald/Documents/MIBI_DATA/selena/20190925_PAH_project/PAHTrainingData/caliban_v3/'
base_dir = '/Users/noahgreenwald/Documents/MIBI_DATA/shirley/test_points/big_test/week6_version/'
base_dir = '/Users/noahgreenwald/Documents/MIBI_DATA/selena/20191215_GBM_Cohort/TA_551_test/mega_dna/'

# base name of network that will be used to save intermediate files
base_name = "deepcell_output"

deepcell_dir = os.path.join(base_dir, "deepcell_output")

# save deepcell_outputs as TIFs, transform and smooth for watershed
pixel_xr_data = xr.open_dataarray(os.path.join(deepcell_dir, base_name + "_pixel.nc"))
pixel_xr_data.name = base_name + "_pixel"
data_utils.save_deepcell_tifs(pixel_xr_data, save_path=deepcell_dir,  transform='pixel', pixel_smooth=[0.5, 1, 2])

watershed_xr_data = xr.open_dataarray(os.path.join(deepcell_dir, base_name + "_watershed.nc"))
watershed_xr_data.name = base_name + "_watershed"
data_utils.save_deepcell_tifs(watershed_xr_data, save_path=deepcell_dir,  transform='watershed')

# load the processed deepcell output
watershed_xr = xr.open_dataarray(os.path.join(deepcell_dir, '{}_watershed_processed.nc'.format(base_name)))
pixel_xr = xr.open_dataarray(os.path.join(deepcell_dir, '{}_pixel_processed.nc'.format(base_name)))
input_xr = xr.open_dataarray(base_dir + '../Na_No_Background/Deepcell_Input_More_Points.nc')

# watershed over the processed deepcell output
segmentation_dir = base_dir + "/segmentation_output_pixel_smooth_0.6/"
if not os.path.isdir(segmentation_dir):
    os.makedirs(segmentation_dir)

segmentation_utils.watershed_transform(pixel_xr, pixel_xr, channel_xr=input_xr, watershed_maxs=False,
                                     pixel_smooth="pixel_interior_smoothed_0.5",
                                     overlay_channels=["Na"], output_dir=segmentation_dir)


# load segmentation generated by watershed
segmentation_labels = xr.open_dataarray(os.path.join(segmentation_dir,
                                                     '{}_pixel_processed_segmentation_labels.nc'.format(base_name)))

# load channel data
points_folder = os.path.join(base_dir, "../no_noise")
tif_folder = 'TIFs'
points = os.listdir(points_folder)
points.sort()
points = points[1:-4]

channels = ['iNOS.tif', 'CD14.tif', 'TIGIT.tif', 'CD16.tif', 'Galectin9.tif', 'HLAG.tif', 'Lck.tif', 'TIM3.tif',
            'CD4.tif', 'Tryptase.tif', 'Ecad.tif', 'IDO.tif', 'VIM.tif', 'CD3.tif', 'SMA.tif', 'CD56.tif', 'CD80.tif',
            'CD57.tif', 'HO1.tif', 'CD11c.tif', 'GrB.tif', 'CD68.tif', 'CD11b.tif', 'CK7.tif', 'CD8.tif', 'PD1.tif',
            'CD44.tif', 'CD45.tif', 'ICOS.tif', 'PDL1.tif', 'Ki67.tif', 'HLADR.tif', 'CD20.tif', 'FoxP3.tif',
            'DCSIGN.tif', 'H3.tif', 'CD163.tif',  'CD206.tif',  'CD31.tif']

image_data = data_utils.load_tifs_from_points_dir(points_folder, tif_folder)

single_cell_dir = base_dir + "single_cell_output/"

if not os.path.exists(single_cell_dir):
    os.makedirs(single_cell_dir)

# segment the imaging data
segmentation_utils.extract_single_cell_data(segmentation_labels=segmentation_labels, image_data=image_data,
                                          save_dir=single_cell_dir)




plot_diff = data[1, 3, :, :, 1] - data[0, 3, :, :, 1]
fig, ax = plt.subplots()
mat = ax.imshow(plot_diff, cmap=plt.get_cmap('GnBu'))
fig.colorbar(mat)
fig.savefig(os.path.join(image_dir, 'interior_border_border_4_class_240k_max_class_examples_unbalanced_' + 'epoch_40vs30_nucleus.tiff'),
            dpi=300)
